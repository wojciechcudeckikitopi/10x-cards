import type { Database } from "./db/database.types";

// -----------------------------------------------------------------------------
// Database Table Type Aliases
// -----------------------------------------------------------------------------

// For flashcards
export type FlashcardRow = Database["public"]["Tables"]["flashcards"]["Row"];
export type FlashcardInsert = Database["public"]["Tables"]["flashcards"]["Insert"];
export type FlashcardUpdate = Database["public"]["Tables"]["flashcards"]["Update"];

// Alias for flashcard status type derived from the database enum.
// This alias represents the possible status values: "pending" | "accepted" | "rejected".
export type FlashcardStatus = Database["public"]["Enums"]["flashcard_status"];

// Alias for flashcard source type derived from the database enum.
// This alias represents the possible source values: "ai", "manual", "ai-edited".
export type FlashcardSource = Database["public"]["Enums"]["flashcard_source"];

// For generations
export type GenerationRow = Database["public"]["Tables"]["generations"]["Row"];
export type GenerationInsert = Database["public"]["Tables"]["generations"]["Insert"];
export type GenerationUpdate = Database["public"]["Tables"]["generations"]["Update"];

// For generation errors
export type GenerationErrorRow = Database["public"]["Tables"]["generation_errors"]["Row"];

/**
 * FlashcardDTO
 * Represents a flashcard as returned by the API.
 * Excludes the "user_id" field which is internal.
 * The "status" field is explicitly typed as FlashcardStatus.
 */
export type FlashcardDTO = Omit<FlashcardRow, "user_id"> & {
  status: FlashcardStatus;
  source: FlashcardSource;
};

/**
 * CreateFlashcardDTO
 * Command model for creating a flashcard.
 * Expects:
 *  - front: Text for the front of the flashcard (max 200 characters)
 *  - back: Text for the back of the flashcard (max 500 characters)
 *  - source: One of "manual", "ai", or "ai-edited"
 *  - generation_id: Optional; provided if the flashcard is related to an AI generation.
 *
 * Utilizes fields from the FlashcardInsert type.
 */
export type CreateFlashcardDTO = Pick<FlashcardInsert, "front" | "back" | "status"> & {
  source: FlashcardSource;
  generation_id?: string;
};

/**
 * CreateFlashcardsCommand
 * Represents the payload for creating one or more flashcards.
 */
export interface CreateFlashcardsCommand {
  flashcards: CreateFlashcardDTO[];
}

/**
 * UpdateFlashcardDTO
 * Command model for updating an existing flashcard.
 * Allows updating:
 *  - front (max 200 characters)
 *  - back (max 500 characters)
 *  - source (must be FlashcardSource, i.e. "ai", "manual", or "ai-edited")
 *  - status (must be FlashcardStatus, i.e. "accepted" or "rejected")
 */
export type UpdateFlashcardDTO = Partial<Pick<FlashcardUpdate, "front" | "back" | "source">> & {
  status?: FlashcardStatus;
};

/**
 * DeleteResponseDTO
 * Represents a deletion confirmation response.
 */
export interface DeleteResponseDTO {
  message: string;
}

// -----------------------------------------------------------------------------
// Generation DTOs and Command Models
// -----------------------------------------------------------------------------

/**
 * GenerationDTO
 * Represents a generation record returned by the API.
 * Excludes the "user_id" field.
 */
export type GenerationDTO = Omit<GenerationRow, "user_id">;

/**
 * GenerateFlashcardsCommand
 * Command model for initiating an AI-driven flashcard generation request.
 * Expects:
 *  - source_text: A text string between 1000 and 10,000 characters.
 */
export interface GenerateFlashcardsCommand {
  source_text: string;
}

/**
 * FlashcardProposalDTO
 * Represents a proposed flashcard generated by AI.
 * Contains:
 *  - front: The text for the front of the flashcard.
 *  - back: The text for the back of the flashcard.
 *  - source: The source type of the flashcard.
 */
export interface FlashcardProposalDTO {
  front: string;
  back: string;
  source: FlashcardSource;
}

/**
 * GenerationCreateResponseDTO
 * Represents the response after initiating flashcard generation.
 * Contains:
 *  - generation_id: The unique identifier for the generation.
 *  - flashcards: An array of flashcard proposals.
 *  - generated_count: The total number of flashcards generated.
 */
export interface GenerationCreateResponseDTO {
  generation_id: string;
  flashcards: FlashcardProposalDTO[];
  generated_count: number;
}

/**
 * GenerationDetailsDTO
 * Detailed generation record that includes the original generation data,
 * associated flashcards, and an error message if any.
 */
export type GenerationDetailsDTO = GenerationDTO & {
  flashcards: FlashcardDTO[];
  error: string | null;
};

// -----------------------------------------------------------------------------
// Generation Error DTO
// -----------------------------------------------------------------------------

/**
 * GenerationErrorDTO
 * Represents an error record from the flashcard generation process.
 * Excludes the "user_id" field.
 */
export type GenerationErrorDTO = Omit<GenerationErrorRow, "user_id">;

// -----------------------------------------------------------------------------
// Shared Pagination Types
// -----------------------------------------------------------------------------

/**
 * Pagination
 * Represents pagination metadata returned with list endpoints.
 */
export interface Pagination {
  page: number;
  limit: number;
  total: number;
}

/**
 * PaginatedResponse
 * A generic type capturing a paginated API response.
 *
 * @template T - The type of items in the paginated list.
 */
export interface PaginatedResponse<T> {
  data: T[];
  pagination: Pagination;
}

/**
 * DashboardStatsViewModel
 * Represents aggregated statistics for the dashboard view.
 * Data is derived from multiple calls to GET /api/flashcards with different status filters.
 */
export interface DashboardStatsViewModel {
  totalFlashcards: number;
  pendingCount: number;
  acceptedCount: number;
  rejectedCount: number;
}
